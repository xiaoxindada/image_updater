#!/sbin/sh
# osm0sis @ xda-developers
# modify: @ https://github.com/xiaoxindada

OUTFD=/proc/self/fd/$2;
ZIP="$3";
tmpdir=/data/anykernel;
logdir=$tmpdir/logs;
rm -rf $tmpdir;
mkdir -p $tmpdir/bin;
mkdir -p $logdir;
BB=$tmpdir/busybox;
e2fsck=/sbin/e2fsck;
unzip=/sbin/unzip;
cd $tmpdir;

ui_print() {
  while [ "$1" ]; do
    echo "ui_print $1
      ui_print" >> $OUTFD;
    shift;
  done;
}
ui_printfile() {
  while IFS='' read -r line || [[ -n "$line" ]]; do
    ui_print "$line";
  done < $1;
}
show_progress() { echo "progress $1 $2" >> $OUTFD; }
file_getprop() { $BB grep "^$2=" "$1" | $BB cut -d= -f2-; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
abort() { ui_print "$*"; umount /system; umount /data; exit 1; }
find_slot() {
  slot=$(getprop ro.boot.slot_suffix 2>/dev/null);
  [ "$slot" ] || slot=$($BB grep -o 'androidboot.slot_suffix=.*$' /proc/cmdline | $BB cut -d\  -f1 | $BB cut -d= -f2);
  if [ ! "$slot" ]; then
    slot=$(getprop ro.boot.slot 2>/dev/null);
    [ "$slot" ] || slot=$($BB grep -o 'androidboot.slot=.*$' /proc/cmdline | $BB cut -d\  -f1 | $BB cut -d= -f2);
    [ "$slot" ] && slot=_$slot;
  fi;
  [ "$slot" ] && ui_print "ab_slot: $slot";
}

find_slot
ui_print "";
ui_print "通用 image 更新器 By: xiaoxindada";
ui_print "适用设备 A-only, AB, Dynamic";
ui_print "支持动态分区机型卡刷 system,vendor,system_ext,product,odm 分区";
ui_print "请确保 image 为 raw.img";
ui_print "如果img过大你也可以压缩成.gz 在放入";

ui_print "正在释放卡刷包内部文件...";
$unzip -o "$ZIP";
chmod 777 -R $tmpdir;
$BB --install -s bin;

if ! ($BB ls $tmpdir | $BB grep -q -E ".img");then
  abort "image file not found!";
fi;

[ ! -f $e2fsck ] && abort "e2fsck not found!";

partition_name="system system_ext product vendor odm";
for partition in $partition_name ;do
  for slot in "" $slot ;do
    if [ -e $tmpdir/$partition.img.gz ];then
      ui_print "正在解压 $partition.img.gz...";
      $BB gunzip -cf "$tmpdir/$partition.img.gz" > "$tmpdir/$partition.img"
      [ $? != "0" ] && abort "gunzip failed!";
    fi;

    if [ -e "$tmpdir/$partition.img" ];then
      ui_print "$partition.img: $($BB du -sh $tmpdir/$partition.img | $BB awk '{print $1}')";
      $e2fsck -f -y $tmpdir/$partition.img > $logdir/e2fsck.log;
    fi;

    if [ -e /dev/block/bootdevice/by-name/$partition$slot ];then
      [ ! -e $tmpdir/$partition.img ] && continue;
      ui_print "正在刷入$partition$slot分区...";
      $BB dd if=$tmpdir/$partition.img of=/dev/block/bootdevice/by-name/$partition$slot > $logdir/flash.log;
      [ $? != "0" ] && abort "flash $partition.img failed!";
      rm -rf $tmpdir/$partition.img;
    fi;

    if [ -e /dev/block/mapper/$partition$slot ];then
      [ ! -e $tmpdir/$partition.img ] && continue;
      ui_print "检测到当前$partition$slot为动态分区";
      $BB blockdev --setrw /dev/block/mapper/$partition$slot;
      ui_print "正在刷入$partition$slot分区...";
      $BB dd if=$tmpdir/$partition.img of=/dev/block/mapper/$partition$slot > $logdir/flash.log;
      [ $? != "0" ] && abort "flash $partition.img failed!";
      rm -rf $tmpdir/$partition.img; 
    fi;
  done;
done;

rm -rf $tmpdir/*.gz;
ui_print "Done!";
